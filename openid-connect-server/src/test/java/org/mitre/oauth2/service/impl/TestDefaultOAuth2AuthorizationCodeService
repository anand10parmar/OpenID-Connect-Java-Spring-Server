package org.mitre.oauth2.service.impl;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.*;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;
import org.easymock.Mock;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mitre.oauth2.model.AuthenticationHolderEntity;
import org.mitre.oauth2.model.AuthorizationCodeEntity;
import org.mitre.oauth2.repository.AuthorizationCodeRepository;
import org.mitre.oauth2.repository.impl.JpaAuthenticationHolderRepository;
import org.mockito.InjectMocks;
import org.mockito.Matchers;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.security.oauth2.provider.OAuth2Authentication;


@RunWith(MockitoJUnitRunner.class)
public class TestDefaultOAuth2AuthorizationCodeService {
	
	
	OAuth2Authentication authentication = Mockito.mock(OAuth2Authentication.class);
	JpaAuthenticationHolderRepository authRepo = Mockito.mock(JpaAuthenticationHolderRepository.class);
	
	private String codeNotFound;
	
	
	@Mock
	private AuthorizationCodeRepository repository;
	
	
	@Mock
	private AuthenticationHolderEntity authHolder;
	
	@Mock
	private AuthorizationCodeEntity entity;

	@InjectMocks
	private DefaultOAuth2AuthorizationCodeService service;

	@Before
	public void reset() {
		
		Mockito.reset(repository);
		codeNotFound = "codeNotFound";
		Mockito.when(repository.getByCode(codeNotFound)).thenReturn(null);
	}
	
	@Test
	public void testCreateAuthorizationCode(){
	
	//todo
	
		}

	@Test
	public void testConsumeAuthorizationCodeFound() {
		
		String code = service.createAuthorizationCode(authentication);
		assertEquals(repository.getByCode(code),entity);
		when(repository.save(Matchers.isA(AuthorizationCodeEntity.class))).thenReturn(entity);
		
	}

	@Test
	public void testConsumeAuthorizationCodeNotFound() {
		assertThat(null, equalTo(service.consumeAuthorizationCode(codeNotFound)));	
	}
	

	@Test
	public void testConsumeAuthorizationCode(){

		doNothing().when(authHolder).setAuthentication(Matchers.isA(OAuth2Authentication.class));
		when(authRepo.save(Matchers.isA(AuthenticationHolderEntity.class))).thenReturn(authHolder);
		}
	
	@Test
	public void testRespositoryGetAndSet() {
	
		
		service.setRepository(repository);
		assertEquals(service.getRepository(), repository);			
	}
	
	@Test
	public void testExpirationSecond() {

		service.setAuthCodeExpirationSeconds(10);
		assertEquals(service.getAuthCodeExpirationSeconds(), 10);			
	}
	
}
